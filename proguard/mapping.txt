de.schoar.zeusplus.misc.Helper -> de.schoar.zeusplus.a.a:
    java.lang.String tohex(int) -> a
de.schoar.zeusplus.misc.QLog -> de.schoar.zeusplus.a.b:
    int LEVEL -> a
    void d(java.lang.String,java.lang.String) -> a
    void i(java.lang.String,java.lang.String) -> b
    void w(java.lang.String,java.lang.String) -> c
    void e(java.lang.String,java.lang.String) -> d
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
de.schoar.zeusplus.service.Inet6AddressFinder -> de.schoar.zeusplus.service.e:
    java.util.Set pickAddresses() -> a
    java.util.Map getInet6Addresses() -> b
    java.net.Inet6Address parse(java.lang.String) -> a
de.schoar.zeusplus.service.Inet6AddressOrder -> de.schoar.zeusplus.service.i:
    int s1 -> a
    int s2 -> b
    int score(java.net.Inet6Address) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
de.schoar.zeusplus.service.MdnsDiscover -> de.schoar.zeusplus.service.c:
    boolean running -> a
    java.util.Map events -> b
    de.schoar.zeusplus.service.MoodlampRegistry moodlamps -> c
    java.util.Map mdnss -> d
    void run() -> run
    void close() -> a
    void add(java.net.Inet6Address) -> a
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
de.schoar.zeusplus.service.Moodlamp -> de.schoar.zeusplus.service.g:
    java.lang.String id -> a
    java.net.Inet6Address address -> b
    int port -> c
    java.lang.String getId() -> a
    java.net.Inet6Address getAddress() -> b
    int getPort() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
de.schoar.zeusplus.service.MoodlampRegistry -> de.schoar.zeusplus.service.d:
    java.util.List listeners -> a
    java.util.Map mls -> b
    void addLamp(java.lang.String,java.net.Inet6Address,int) -> a
    void clearLamps() -> a
    java.util.List addListener(de.schoar.zeusplus.service.MoodlampRegistryListener) -> a
    void removeListener(de.schoar.zeusplus.service.MoodlampRegistryListener) -> b
de.schoar.zeusplus.service.MoodlampRegistryListener -> de.schoar.zeusplus.service.f:
    void moodlampAdded(de.schoar.zeusplus.service.Moodlamp) -> a
    void moodlampsRemoved() -> a
de.schoar.zeusplus.service.MoodlampSender -> de.schoar.zeusplus.service.a:
    boolean running -> a
    java.util.Map actions -> b
    void enqueue(java.util.List,int) -> a
    void run() -> run
    void close() -> a
de.schoar.zeusplus.service.MoodlampService -> de.schoar.zeusplus.service.MoodlampService:
    android.os.IBinder binder -> a
    de.schoar.zeusplus.service.WifiLock wifiLock -> b
    de.schoar.zeusplus.service.Inet6AddressFinder inet6AddressFinder -> c
    de.schoar.zeusplus.service.MdnsDiscover mdnsDiscover -> d
    de.schoar.zeusplus.service.MoodlampRegistry moodlamps -> e
    de.schoar.zeusplus.service.MoodlampSender moodlampSender -> f
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    void discoverStart() -> a
    void send(java.util.List,int) -> a
    de.schoar.zeusplus.service.MoodlampRegistry getRegistry() -> b
de.schoar.zeusplus.service.MoodlampService$MoodlampServiceBinder -> de.schoar.zeusplus.service.b:
    de.schoar.zeusplus.service.MoodlampService this$0 -> a
    de.schoar.zeusplus.service.MoodlampService getService() -> a
de.schoar.zeusplus.service.WifiLock -> de.schoar.zeusplus.service.h:
    android.content.Context ctx -> a
    android.net.wifi.WifiManager$MulticastLock wifiMulticastLock -> b
    void acquire() -> a
    void release() -> b
    boolean isHeld() -> c
de.schoar.zeusplus.ui.AboutDialog -> de.schoar.zeusplus.ui.a:
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String getVersionName(android.content.Context,java.lang.String) -> a
de.schoar.zeusplus.ui.AboutDialog$1 -> de.schoar.zeusplus.ui.c:
    de.schoar.zeusplus.ui.AboutDialog this$0 -> a
    android.app.Dialog val$d -> b
    void onClick(android.view.View) -> onClick
de.schoar.zeusplus.ui.AboutDialog$2 -> de.schoar.zeusplus.ui.d:
    de.schoar.zeusplus.ui.AboutDialog this$0 -> a
    android.app.Dialog val$d -> b
    void onClick(android.view.View) -> onClick
de.schoar.zeusplus.ui.ColorBlockView -> de.schoar.zeusplus.ui.ColorBlockView:
    android.view.View$OnClickListener mOnClickListener -> a
    java.lang.Long mLastClick -> b
    android.os.Handler mClickHandler -> c
    android.graphics.Paint mPaintFrame -> d
    android.graphics.Paint mPaintFill -> e
    android.graphics.Paint mPaintText -> f
    int mWidth -> g
    java.lang.String mText -> h
    java.lang.Runnable r -> i
    void setColor(int,int,int) -> a
    void blinkFrame() -> a
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setOnClickListener(android.view.View$OnClickListener) -> setOnClickListener
    android.graphics.Paint access$0(de.schoar.zeusplus.ui.ColorBlockView) -> a
de.schoar.zeusplus.ui.ColorBlockView$BlinkOffRunnable -> de.schoar.zeusplus.ui.g:
    de.schoar.zeusplus.ui.ColorBlockView this$0 -> a
    void run() -> run
de.schoar.zeusplus.ui.LampView -> de.schoar.zeusplus.ui.f:
    android.content.Context ctx -> a
    de.schoar.zeusplus.service.Moodlamp ml -> b
    android.widget.TextView tv -> c
    android.widget.ImageView iv -> d
    boolean selected -> e
    boolean isSelected() -> isSelected
    void toggleSelected() -> a
    de.schoar.zeusplus.service.Moodlamp getMoodlamp() -> b
de.schoar.zeusplus.ui.LampView$1 -> de.schoar.zeusplus.ui.e:
    de.schoar.zeusplus.ui.LampView this$0 -> a
    void onClick(android.view.View) -> onClick
de.schoar.zeusplus.ui.LampsView -> de.schoar.zeusplus.ui.LampsView:
    android.content.Context ctx -> a
    java.util.Set mls -> b
    void moodlampAdded(de.schoar.zeusplus.service.Moodlamp) -> a
    void moodlampsRemoved() -> a
    java.util.List getSelected() -> b
de.schoar.zeusplus.ui.MultiColorBlockListener -> de.schoar.zeusplus.ui.b:
    void changeColor(int) -> a
    void changePreset(int) -> b
de.schoar.zeusplus.ui.MultiColorBlockView -> de.schoar.zeusplus.ui.MultiColorBlockView:
    de.schoar.zeusplus.ui.MultiColorBlockListener mListener -> a
    android.graphics.Paint mPaintFrame -> b
    android.graphics.Paint mPaintFill -> c
    int mWidth -> d
    int mHeight -> e
    int mBlockCount -> f
    int[] mColors -> g
    void setColors(int[]) -> a
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setListener(de.schoar.zeusplus.ui.MultiColorBlockListener) -> a
de.schoar.zp.C -> de.schoar.zp.e:
    int LOGLEVEL -> a
de.schoar.zp.CopyOfMainActivity -> de.schoar.zp.CopyOfMainActivity:
    void onCreate(android.os.Bundle) -> onCreate
de.schoar.zp.MainActivity -> de.schoar.zp.MainActivity:
    android.os.Handler mHandlerAction -> a
    de.schoar.zeusplus.ui.ColorBlockView mColorBlockView -> b
    android.widget.SeekBar mSeekBarR -> c
    android.widget.SeekBar mSeekBarG -> d
    android.widget.SeekBar mSeekBarB -> e
    de.schoar.zeusplus.ui.MultiColorBlockView mMultiColorBlockView -> f
    de.schoar.zeusplus.ui.LampsView mLamps -> g
    de.schoar.zeusplus.service.MoodlampService moodlampService -> h
    boolean moodlampServiceBound -> i
    android.content.ServiceConnection mConnection -> j
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void store() -> b
    void restore() -> c
    void fireColor(boolean) -> a
    void changeColor(int) -> a
    void changePreset(int) -> b
    int[] getColors() -> d
    void setColors(int[]) -> a
    void moodlampAdded(de.schoar.zeusplus.service.Moodlamp) -> a
    void moodlampsRemoved() -> a
    void access$0(de.schoar.zp.MainActivity,de.schoar.zeusplus.service.MoodlampService) -> a
    void access$1(de.schoar.zp.MainActivity,boolean) -> a
    de.schoar.zeusplus.service.MoodlampService access$2(de.schoar.zp.MainActivity) -> a
    void access$3(de.schoar.zp.MainActivity,boolean) -> b
    android.widget.SeekBar access$4(de.schoar.zp.MainActivity) -> b
    android.widget.SeekBar access$5(de.schoar.zp.MainActivity) -> c
    android.widget.SeekBar access$6(de.schoar.zp.MainActivity) -> d
    de.schoar.zeusplus.ui.ColorBlockView access$7(de.schoar.zp.MainActivity) -> e
    boolean access$8(de.schoar.zp.MainActivity) -> f
    de.schoar.zeusplus.ui.LampsView access$9(de.schoar.zp.MainActivity) -> g
de.schoar.zp.MainActivity$1 -> de.schoar.zp.c:
    de.schoar.zp.MainActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
de.schoar.zp.MainActivity$2 -> de.schoar.zp.a:
    de.schoar.zp.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
de.schoar.zp.MainActivity$3 -> de.schoar.zp.b:
    de.schoar.zp.MainActivity this$0 -> a
    boolean val$fromUser -> b
    void run() -> run
de.schoar.zp.MainActivity$4 -> de.schoar.zp.d:
    de.schoar.zp.MainActivity this$0 -> a
    de.schoar.zeusplus.service.Moodlamp val$ml -> b
    void run() -> run
de.schoar.zp.MainActivity$RGBSeekBarChangeListener -> de.schoar.zp.f:
    de.schoar.zp.MainActivity this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
javax.jmdns.JmDNS -> a.a.g:
    void requestServiceInfo$3b99f9eb(java.lang.String,java.lang.String) -> a
    void addServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> a
javax.jmdns.NetworkTopologyDiscovery -> a.a.e:
    java.net.InetAddress[] getInetAddresses() -> a
javax.jmdns.NetworkTopologyDiscovery$Factory -> a.a.i:
    javax.jmdns.NetworkTopologyDiscovery _instance -> a
    java.util.concurrent.atomic.AtomicReference _databaseClassDelegate -> b
    javax.jmdns.NetworkTopologyDiscovery getInstance() -> a
javax.jmdns.NetworkTopologyDiscovery$Factory$ClassDelegate -> a.a.h:
    javax.jmdns.NetworkTopologyDiscovery newNetworkTopologyDiscovery() -> a
javax.jmdns.ServiceEvent -> a.a.c:
    javax.jmdns.JmDNS getDNS() -> a
    java.lang.String getType() -> b
    java.lang.String getName() -> c
    javax.jmdns.ServiceInfo getInfo() -> d
    javax.jmdns.ServiceEvent clone() -> e
    java.lang.Object clone() -> clone
javax.jmdns.ServiceInfo -> a.a.d:
    byte[] NO_VALUE -> a
    boolean hasData() -> r
    java.lang.String getType() -> a
    java.lang.String getName() -> c
    java.lang.String getQualifiedName() -> e
    java.lang.String getServer() -> f
    java.net.Inet4Address[] getInet4Addresses() -> g
    java.net.Inet6Address[] getInet6Addresses() -> h
    int getPort() -> i
    int getPriority() -> j
    int getWeight() -> k
    byte[] getTextBytes() -> l
    boolean isPersistent() -> B
    java.lang.String getDomain() -> n
    java.lang.String getProtocol() -> o
    java.lang.String getApplication() -> m
    java.lang.String getSubtype() -> p
    javax.jmdns.ServiceInfo clone() -> E
    java.lang.Object clone() -> clone
javax.jmdns.ServiceInfo$Fields -> a.a.f:
    javax.jmdns.ServiceInfo$Fields Domain -> a
    javax.jmdns.ServiceInfo$Fields Protocol -> b
    javax.jmdns.ServiceInfo$Fields Application -> c
    javax.jmdns.ServiceInfo$Fields Instance -> d
    javax.jmdns.ServiceInfo$Fields Subtype -> e
    javax.jmdns.ServiceInfo$Fields[] $VALUES -> f
    javax.jmdns.ServiceInfo$Fields[] values() -> values
    javax.jmdns.ServiceInfo$Fields valueOf(java.lang.String) -> valueOf
javax.jmdns.ServiceListener -> a.a.a:
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
javax.jmdns.ServiceTypeListener -> a.a.b:
javax.jmdns.impl.DNSCache -> a.a.a.av:
    java.util.Set _entrySet -> a
    javax.jmdns.impl.DNSCache EmptyCache -> b
    java.util.Set entrySet() -> entrySet
    java.util.Map$Entry getEntry(java.lang.String) -> b
    java.util.List put(java.lang.String,java.util.List) -> a
    java.lang.Object clone() -> clone
    java.util.Collection allValues() -> a
    java.util.Collection getDNSEntryList(java.lang.String) -> a
    javax.jmdns.impl.DNSEntry getDNSEntry(javax.jmdns.impl.DNSEntry) -> a
    javax.jmdns.impl.DNSEntry getDNSEntry(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass) -> a
    java.util.Collection getDNSEntryList(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass) -> b
    boolean addDNSEntry(javax.jmdns.impl.DNSEntry) -> b
    boolean removeDNSEntry(javax.jmdns.impl.DNSEntry) -> c
    boolean replaceDNSEntry(javax.jmdns.impl.DNSEntry,javax.jmdns.impl.DNSEntry) -> a
    java.lang.String toString() -> toString
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
javax.jmdns.impl.DNSCache$_CacheEntry -> a.a.a.at:
    java.util.List _value -> a
    java.lang.String _key -> b
    java.lang.String getKey() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
javax.jmdns.impl.DNSCache$_EmptyCache -> a.a.a.q:
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    java.util.List put(java.lang.String,java.util.List) -> a
    int hashCode() -> hashCode
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
javax.jmdns.impl.DNSEntry -> a.a.a.ao:
    java.lang.String _key -> a
    java.lang.String _name -> c
    java.lang.String _type -> d
    javax.jmdns.impl.constants.DNSRecordType _recordType -> e
    javax.jmdns.impl.constants.DNSRecordClass _dnsClass -> f
    boolean _unique -> g
    java.util.Map _qualifiedNameMap -> b
    boolean equals(java.lang.Object) -> equals
    boolean isSameEntry(javax.jmdns.impl.DNSEntry) -> a
    java.lang.String getSubtype() -> f
    java.lang.String getName() -> g
    java.lang.String getType() -> h
    java.lang.String getKey() -> i
    javax.jmdns.impl.constants.DNSRecordType getRecordType() -> j
    javax.jmdns.impl.constants.DNSRecordClass getRecordClass() -> k
    boolean isUnique() -> l
    boolean isServicesDiscoveryMetaQuery() -> m
    boolean isDomainDiscoveryQuery() -> n
    boolean isReverseLookup() -> o
    boolean isV4ReverseLookup() -> p
    boolean isV6ReverseLookup() -> q
    boolean isExpired(long) -> a
    boolean isSameRecordClass(javax.jmdns.impl.DNSEntry) -> b
    boolean isSameType(javax.jmdns.impl.DNSEntry) -> c
    void toByteArray(java.io.DataOutputStream) -> a
    byte[] toByteArray() -> a
    int compareTo(javax.jmdns.impl.DNSEntry) -> d
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSIncoming -> a.a.a.an:
    java.util.logging.Logger logger -> b
    boolean USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET -> a
    java.net.DatagramPacket _packet -> h
    long _receivedTime -> i
    javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream -> j
    int _senderUDPPayload -> k
    char[] _nibbleToHex -> l
    javax.jmdns.impl.DNSRecord readAnswer(java.net.InetAddress) -> a
    java.lang.String print$56aeb37f() -> a
    java.lang.String toString() -> toString
    void append(javax.jmdns.impl.DNSIncoming) -> a
    int elapseSinceArrival() -> c
    int getSenderUDPPayload() -> s
    java.lang.String _hexString(byte[]) -> b
javax.jmdns.impl.DNSIncoming$1 -> a.a.a.n:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSLabel -> a
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSOptionCode -> b
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> c
javax.jmdns.impl.DNSIncoming$MessageInputStream -> a.a.a.ak:
    java.util.logging.Logger logger1 -> a
    java.util.Map _names -> b
    int readUnsignedShort() -> a
    int readInt() -> b
    byte[] readBytes(int) -> a
    java.lang.String readUTF(int) -> b
    java.lang.String readName() -> c
    java.lang.String readNonNameString() -> d
javax.jmdns.impl.DNSListener -> a.a.a.au:
    void updateRecord(javax.jmdns.impl.DNSCache,long,javax.jmdns.impl.DNSEntry) -> a
javax.jmdns.impl.DNSMessage -> a.a.a.ae:
    int _id -> a
    boolean _multicast -> c
    int _flags -> b
    java.util.List _questions -> d
    java.util.List _answers -> e
    java.util.List _authoritativeAnswers -> f
    java.util.List _additionals -> g
    int getId() -> d
    void setId(int) -> a
    int getFlags() -> e
    void setFlags(int) -> b
    boolean isMulticast() -> f
    java.util.Collection getQuestions() -> g
    int getNumberOfQuestions() -> h
    java.util.Collection getAllAnswers() -> i
    java.util.Collection getAnswers() -> j
    int getNumberOfAnswers() -> k
    java.util.Collection getAuthorities() -> l
    int getNumberOfAuthorities() -> m
    java.util.Collection getAdditionals() -> n
    int getNumberOfAdditionals() -> o
    boolean isTruncated() -> p
    boolean isQuery() -> b
    boolean isEmpty() -> q
    java.lang.String print() -> r
    java.lang.String print(byte[]) -> a
javax.jmdns.impl.DNSOutgoing -> a.a.a.r:
    boolean USE_DOMAIN_NAME_COMPRESSION -> a
    java.util.Map _names -> b
    int _maxUDPPayload -> h
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _questionsBytes -> i
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _answersBytes -> j
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _authoritativeAnswersBytes -> k
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _additionalsAnswersBytes -> l
    int availableSpace() -> s
    void addQuestion(javax.jmdns.impl.DNSQuestion) -> a
    void addAnswer(javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord) -> a
    void addAnswer(javax.jmdns.impl.DNSRecord,long) -> a
    void addAuthorativeAnswer(javax.jmdns.impl.DNSRecord) -> a
    byte[] data() -> a
    boolean isQuery() -> b
    java.lang.String toString() -> toString
    int getMaxUDPPayload() -> c
javax.jmdns.impl.DNSOutgoing$MessageOutputStream -> a.a.a.k:
    javax.jmdns.impl.DNSOutgoing _out -> a
    int _offset -> b
    void writeByte(int) -> a
    void writeBytes$1cf967a4(byte[],int) -> a
    void writeShort(int) -> b
    void writeUTF$44bd8e9f(java.lang.String,int) -> a
    void writeName(java.lang.String) -> a
    void writeQuestion(javax.jmdns.impl.DNSQuestion) -> a
    void writeRecord(javax.jmdns.impl.DNSRecord,long) -> a
javax.jmdns.impl.DNSQuestion -> a.a.a.ax:
    java.util.logging.Logger logger -> a
    javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean) -> a
    boolean answeredBy(javax.jmdns.impl.DNSEntry) -> e
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    void addAnswersForServiceInfo(javax.jmdns.impl.JmDNSImpl,java.util.Set,javax.jmdns.impl.ServiceInfoImpl) -> a
    boolean isExpired(long) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSQuestion$1 -> a.a.a.bf:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> a
javax.jmdns.impl.DNSQuestion$AllRecords -> a.a.a.bg:
    boolean isSameType(javax.jmdns.impl.DNSEntry) -> c
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$DNS4Address -> a.a.a.i:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$DNS6Address -> a.a.a.aj:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$HostInformation -> a.a.a.am:
javax.jmdns.impl.DNSQuestion$Pointer -> a.a.a.c:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
javax.jmdns.impl.DNSQuestion$Service -> a.a.a.d:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$Text -> a.a.a.as:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSRecord -> a.a.a.ar:
    java.util.logging.Logger logger -> a
    int _ttl -> d
    long _created -> e
    java.net.InetAddress _source -> f
    byte[] EMPTY_TXT -> c
    boolean equals(java.lang.Object) -> equals
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean sameType(javax.jmdns.impl.DNSRecord) -> b
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    boolean suppressedBy(javax.jmdns.impl.DNSIncoming) -> a
    long getExpirationTime(int) -> a
    int getRemainingTTL(long) -> b
    boolean isExpired(long) -> a
    boolean isStale(long) -> c
    void resetTTL(javax.jmdns.impl.DNSRecord) -> c
    void setWillExpireSoon(long) -> d
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    boolean isSingleValued() -> a
    javax.jmdns.ServiceInfo getServiceInfo() -> r
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void setRecordSource(java.net.InetAddress) -> a
    java.net.InetAddress getRecordSource() -> s
    void toString(java.lang.StringBuilder) -> a
    int getTTL() -> t
javax.jmdns.impl.DNSRecord$Address -> a.a.a.ab:
    java.util.logging.Logger logger1 -> d
    java.net.InetAddress _addr -> a
    boolean sameName(javax.jmdns.impl.DNSRecord) -> d
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> a
    java.net.InetAddress getAddress() -> b
    void toByteArray(java.io.DataOutputStream) -> a
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$HostInformation -> a.a.a.e:
    java.lang.String _os -> a
    java.lang.String _cpu -> d
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> a
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$IPv4Address -> a.a.a.ag:
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
javax.jmdns.impl.DNSRecord$IPv6Address -> a.a.a.bc:
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
javax.jmdns.impl.DNSRecord$Pointer -> a.a.a.be:
    java.lang.String _alias -> a
    boolean isSameEntry(javax.jmdns.impl.DNSEntry) -> a
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> a
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    java.lang.String getAlias() -> b
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$Service -> a.a.a.af:
    java.util.logging.Logger logger1 -> a
    int _priority -> d
    int _weight -> e
    int _port -> f
    java.lang.String _server -> g
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    void toByteArray(java.io.DataOutputStream) -> a
    java.lang.String getServer() -> b
    int getPriority() -> c
    int getWeight() -> d
    int getPort() -> e
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> a
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$Text -> a.a.a.aq:
    byte[] _text -> a
    byte[] getText() -> b
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> a
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSStatefulObject -> a.a.a.p:
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore -> a.a.a.b:
    java.util.logging.Logger logger -> a
    java.lang.String _name -> b
    java.util.concurrent.ConcurrentMap _semaphores -> c
    void waitForEvent(long) -> a
    void signalEvent() -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSStatefulObject$DefaultImplementation -> a.a.a.o:
    java.util.logging.Logger logger -> c
    javax.jmdns.impl.JmDNSImpl _dns -> d
    javax.jmdns.impl.tasks.DNSTask _task -> a
    javax.jmdns.impl.constants.DNSState _state -> b
    javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore _announcing -> e
    javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore _canceling -> f
    javax.jmdns.impl.JmDNSImpl getDns() -> a
    void setDns(javax.jmdns.impl.JmDNSImpl) -> a
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    void setTask(javax.jmdns.impl.tasks.DNSTask) -> c
    void setState(javax.jmdns.impl.constants.DNSState) -> a
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    boolean revertState() -> b
    boolean cancelState() -> c
    boolean closeState() -> d
    boolean recoverState() -> e
    boolean isProbing() -> f
    boolean isAnnouncing() -> g
    boolean isAnnounced() -> h
    boolean isCanceling() -> i
    boolean isCanceled() -> j
    boolean isClosing() -> k
    boolean isClosed() -> l
    boolean willCancel() -> o
    boolean willClose() -> p
    boolean waitForAnnounced$1349f3() -> m
    boolean waitForCanceled$1349f3() -> n
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSTaskStarter -> a.a.a.ap:
    void purgeTimer() -> l
    void purgeStateTimer() -> m
    void cancelTimer() -> n
    void cancelStateTimer() -> o
    void startProber() -> p
    void startAnnouncer() -> q
    void startRenewer() -> r
    void startCanceler() -> s
    void startReaper() -> t
    void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl) -> a
    void startServiceResolver(java.lang.String) -> b
    void startResponder(javax.jmdns.impl.DNSIncoming,int) -> b
javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl -> a.a.a.ad:
    javax.jmdns.impl.JmDNSImpl _jmDNSImpl -> a
    java.util.Timer _timer -> b
    java.util.Timer _stateTimer -> c
    void purgeTimer() -> l
    void purgeStateTimer() -> m
    void cancelTimer() -> n
    void cancelStateTimer() -> o
    void startProber() -> p
    void startAnnouncer() -> q
    void startRenewer() -> r
    void startCanceler() -> s
    void startReaper() -> t
    void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl) -> a
    void startServiceResolver(java.lang.String) -> b
    void startResponder(javax.jmdns.impl.DNSIncoming,int) -> b
javax.jmdns.impl.DNSTaskStarter$Factory -> a.a.a.t:
    javax.jmdns.impl.DNSTaskStarter$Factory _instance -> a
    java.util.concurrent.ConcurrentMap _instances -> b
    java.util.concurrent.atomic.AtomicReference _databaseClassDelegate -> c
    javax.jmdns.impl.DNSTaskStarter$Factory getInstance() -> a
    javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSTaskStarter$Factory$ClassDelegate -> a.a.a.j:
    javax.jmdns.impl.DNSTaskStarter newDNSTaskStarter$325bdef2() -> a
javax.jmdns.impl.HostInfo -> a.a.a.a:
    java.util.logging.Logger logger -> a
    java.lang.String _name -> b
    java.net.InetAddress _address -> c
    java.net.NetworkInterface _interfaze -> d
    javax.jmdns.impl.HostInfo$HostInfoState _state -> e
    int hostNameCount -> f
    javax.jmdns.impl.HostInfo newHostInfo$1c92b5f1(java.net.InetAddress,javax.jmdns.impl.JmDNSImpl) -> a
    java.net.InetAddress loopbackAddress() -> s
    java.lang.String getName() -> a
    java.net.InetAddress getInetAddress() -> b
    java.net.Inet4Address getInet4Address() -> c
    java.net.Inet6Address getInet6Address() -> d
    java.net.NetworkInterface getInterface() -> e
    java.lang.String incrementHostName() -> f
    boolean shouldIgnorePacket(java.net.DatagramPacket) -> a
    javax.jmdns.impl.DNSRecord$Address getDNSAddressRecord$5cb90664(javax.jmdns.impl.constants.DNSRecordType,boolean) -> a
    javax.jmdns.impl.DNSRecord$Address getDNS4AddressRecord(boolean,int) -> b
    javax.jmdns.impl.DNSRecord$Address getDNS6AddressRecord(boolean,int) -> c
    javax.jmdns.impl.DNSRecord$Pointer getDNSReverseAddressRecord$7b3a073(javax.jmdns.impl.constants.DNSRecordType) -> a
    java.lang.String toString() -> toString
    java.util.Collection answers(boolean,int) -> a
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    boolean revertState() -> g
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    boolean cancelState() -> h
    boolean closeState() -> i
    boolean recoverState() -> j
    boolean isProbing() -> k
    boolean isAnnounced() -> l
    boolean isCanceling() -> m
    boolean isCanceled() -> n
    boolean isClosing() -> o
    boolean isClosed() -> p
    boolean waitForAnnounced$1349f3() -> q
    boolean waitForCanceled$1349f3() -> r
javax.jmdns.impl.HostInfo$1 -> a.a.a.bd:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> a
javax.jmdns.impl.HostInfo$HostInfoState -> a.a.a.bb:
javax.jmdns.impl.JmDNSImpl -> a.a.a.g:
    java.util.logging.Logger logger -> a
    java.net.InetAddress _group -> b
    java.net.MulticastSocket _socket -> c
    java.util.List _listeners -> d
    java.util.concurrent.ConcurrentMap _serviceListeners -> e
    java.util.Set _typeListeners -> f
    javax.jmdns.impl.DNSCache _cache -> g
    java.util.concurrent.ConcurrentMap _services -> h
    java.util.concurrent.ConcurrentMap _serviceTypes -> i
    java.lang.Thread _shutdown -> j
    javax.jmdns.impl.HostInfo _localHost -> k
    java.lang.Thread _incomingListener -> l
    int _throttle -> m
    long _lastThrottleIncrement -> n
    java.util.concurrent.ExecutorService _executor -> o
    java.util.Random _random -> p
    java.util.concurrent.locks.ReentrantLock _ioLock -> q
    javax.jmdns.impl.DNSIncoming _plannedAnswer -> r
    java.util.concurrent.ConcurrentMap _serviceCollectors -> s
    java.lang.String _name -> t
    java.lang.Object _recoverLock -> u
    void start(java.util.Collection) -> a
    void openMulticastSocket(javax.jmdns.impl.HostInfo) -> a
    void closeMulticastSocket() -> D
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    boolean revertState() -> a
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    boolean isProbing() -> b
    boolean isAnnounced() -> c
    boolean isCanceling() -> d
    boolean isCanceled() -> e
    boolean isClosing() -> f
    boolean isClosed() -> g
    javax.jmdns.impl.DNSCache getCache() -> h
    java.lang.String getName() -> i
    javax.jmdns.impl.HostInfo getLocalHost() -> j
    java.net.InetAddress getInterface() -> k
    javax.jmdns.impl.ServiceInfoImpl resolveServiceInfo$3938040e(java.lang.String,java.lang.String,java.lang.String) -> a
    javax.jmdns.impl.ServiceInfoImpl getServiceInfoFromCache(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void requestServiceInfo$3b99f9eb(java.lang.String,java.lang.String) -> a
    void handleServiceResolved(javax.jmdns.ServiceEvent) -> a
    void addServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> a
    void addServiceListener(java.lang.String,javax.jmdns.ServiceListener,boolean) -> a
    void unregisterAllServices() -> E
    boolean registerServiceType(java.lang.String) -> c
    boolean makeServiceNameUnique(javax.jmdns.impl.ServiceInfoImpl) -> b
    java.lang.String incrementName(java.lang.String) -> a
    void addListener(javax.jmdns.impl.DNSListener,javax.jmdns.impl.DNSQuestion) -> a
    void removeListener(javax.jmdns.impl.DNSListener) -> a
    void updateRecord(long,javax.jmdns.impl.DNSRecord,javax.jmdns.impl.JmDNSImpl$Operation) -> a
    void handleRecord(javax.jmdns.impl.DNSRecord,long) -> a
    void handleResponse(javax.jmdns.impl.DNSIncoming) -> a
    void handleQuery$7a05e58d(javax.jmdns.impl.DNSIncoming,int) -> a
    void respondToQuery(javax.jmdns.impl.DNSIncoming) -> b
    void send(javax.jmdns.impl.DNSOutgoing) -> a
    void purgeTimer() -> l
    void purgeStateTimer() -> m
    void cancelTimer() -> n
    void cancelStateTimer() -> o
    void startProber() -> p
    void startAnnouncer() -> q
    void startRenewer() -> r
    void startCanceler() -> s
    void startReaper() -> t
    void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl) -> a
    void startServiceResolver(java.lang.String) -> b
    void startResponder(javax.jmdns.impl.DNSIncoming,int) -> b
    void recover() -> u
    void __recover() -> v
    void cleanCache() -> w
    void close() -> close
    java.lang.String toString() -> toString
    void disposeServiceCollectors() -> F
    java.lang.String toUnqualifiedName(java.lang.String,java.lang.String) -> b
    java.util.Map getServices() -> x
    void setLastThrottleIncrement(long) -> a
    long getLastThrottleIncrement() -> y
    void setThrottle(int) -> a
    int getThrottle() -> z
    java.util.Random getRandom() -> A
    java.util.Map getServiceTypes() -> B
    java.net.MulticastSocket getSocket() -> C
javax.jmdns.impl.JmDNSImpl$1 -> a.a.a.ac:
    javax.jmdns.impl.ListenerStatus$ServiceListenerStatus val$listener -> a
    javax.jmdns.ServiceEvent val$localEvent -> b
    javax.jmdns.impl.JmDNSImpl this$0 -> c
    void run() -> run
javax.jmdns.impl.JmDNSImpl$2 -> a.a.a.aa:
    javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus val$status -> a
    javax.jmdns.ServiceEvent val$event -> b
    javax.jmdns.impl.JmDNSImpl this$0 -> c
    void run() -> run
javax.jmdns.impl.JmDNSImpl$3 -> a.a.a.z:
    javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus val$status -> a
    javax.jmdns.ServiceEvent val$event -> b
    javax.jmdns.impl.JmDNSImpl this$0 -> c
    void run() -> run
javax.jmdns.impl.JmDNSImpl$4 -> a.a.a.y:
    javax.jmdns.impl.ListenerStatus$ServiceListenerStatus val$listener -> a
    javax.jmdns.ServiceEvent val$localEvent -> b
    javax.jmdns.impl.JmDNSImpl this$0 -> c
    void run() -> run
javax.jmdns.impl.JmDNSImpl$5 -> a.a.a.x:
    javax.jmdns.impl.ListenerStatus$ServiceListenerStatus val$listener -> a
    javax.jmdns.ServiceEvent val$localEvent -> b
    javax.jmdns.impl.JmDNSImpl this$0 -> c
    void run() -> run
javax.jmdns.impl.JmDNSImpl$6 -> a.a.a.w:
    javax.jmdns.impl.JmDNSImpl this$0 -> a
    void run() -> run
javax.jmdns.impl.JmDNSImpl$7 -> a.a.a.u:
    int[] $SwitchMap$javax$jmdns$impl$JmDNSImpl$Operation -> a
javax.jmdns.impl.JmDNSImpl$Operation -> a.a.a.f:
    javax.jmdns.impl.JmDNSImpl$Operation Remove -> a
    javax.jmdns.impl.JmDNSImpl$Operation Update -> b
    javax.jmdns.impl.JmDNSImpl$Operation Add -> c
    javax.jmdns.impl.JmDNSImpl$Operation RegisterServiceType -> d
    javax.jmdns.impl.JmDNSImpl$Operation Noop -> e
    javax.jmdns.impl.JmDNSImpl$Operation[] $VALUES -> f
    javax.jmdns.impl.JmDNSImpl$Operation[] values() -> values
    javax.jmdns.impl.JmDNSImpl$Operation valueOf(java.lang.String) -> valueOf
javax.jmdns.impl.JmDNSImpl$ServiceCollector -> a.a.a.al:
    java.util.concurrent.ConcurrentMap _infos -> a
    java.util.concurrent.ConcurrentMap _events -> b
    java.lang.String _type -> c
    boolean _needToWaitForInfos -> d
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
    java.lang.String toString() -> toString
javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry -> a.a.a.ay:
    java.util.Set _entrySet -> a
    java.lang.String _type -> b
    java.lang.String getType() -> a
    java.util.Set entrySet() -> entrySet
    boolean contains(java.lang.String) -> a
    boolean add(java.lang.String) -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry$SubTypeEntry -> a.a.a.ah:
    java.lang.String _key -> a
    java.lang.String _value -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
javax.jmdns.impl.ListenerStatus -> a.a.a.aw:
    java.util.EventListener _listener -> a
    boolean _synch -> b
    java.util.EventListener getListener() -> a
    boolean isSynchronous() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
javax.jmdns.impl.ListenerStatus$ServiceListenerStatus -> a.a.a.l:
    java.util.logging.Logger logger -> a
    java.util.concurrent.ConcurrentMap _addedServices -> b
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
    boolean _sameInfo(javax.jmdns.ServiceInfo,javax.jmdns.ServiceInfo) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus -> a.a.a.ba:
    java.util.logging.Logger logger -> a
    java.util.concurrent.ConcurrentMap _addedTypes -> b
    void serviceTypeAdded(javax.jmdns.ServiceEvent) -> a
    void subTypeForServiceTypeAdded(javax.jmdns.ServiceEvent) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.NetworkTopologyDiscoveryImpl -> a.a.a.v:
    java.util.logging.Logger logger -> a
    java.lang.reflect.Method _isUp -> b
    java.lang.reflect.Method _supportsMulticast -> c
    java.net.InetAddress[] getInetAddresses() -> a
    boolean useInetAddress(java.net.NetworkInterface,java.net.InetAddress) -> a
javax.jmdns.impl.ServiceEventImpl -> a.a.a.az:
    java.lang.String _type -> a
    java.lang.String _name -> b
    javax.jmdns.ServiceInfo _info -> c
    javax.jmdns.JmDNS getDNS() -> a
    java.lang.String getType() -> b
    java.lang.String getName() -> c
    java.lang.String toString() -> toString
    javax.jmdns.ServiceInfo getInfo() -> d
    javax.jmdns.impl.ServiceEventImpl clone() -> f
    javax.jmdns.ServiceEvent clone() -> e
    java.lang.Object clone() -> clone
javax.jmdns.impl.ServiceInfoImpl -> a.a.a.h:
    java.util.logging.Logger logger -> b
    java.lang.String _domain -> c
    java.lang.String _protocol -> d
    java.lang.String _application -> e
    java.lang.String _name -> f
    java.lang.String _subtype -> g
    java.lang.String _server -> h
    int _port -> i
    int _weight -> j
    int _priority -> k
    byte[] _text -> l
    java.util.Map _props -> m
    java.util.Set _ipv4Addresses -> n
    java.util.Set _ipv6Addresses -> o
    java.lang.String _key -> p
    boolean _persistent -> q
    boolean _needTextAnnouncing -> r
    javax.jmdns.impl.ServiceInfoImpl$ServiceInfoState _state -> s
    java.util.Map decodeQualifiedNameMapForType(java.lang.String) -> a
    java.util.Map checkQualifiedNameMap(java.util.Map) -> a
    java.lang.String removeSeparators(java.lang.String) -> d
    java.lang.String getType() -> a
    java.lang.String getTypeWithSubtype() -> b
    java.lang.String getName() -> c
    java.lang.String getKey() -> d
    void setName(java.lang.String) -> b
    java.lang.String getQualifiedName() -> e
    java.lang.String getServer() -> f
    void setServer(java.lang.String) -> c
    void addAddress(java.net.Inet4Address) -> a
    void addAddress(java.net.Inet6Address) -> a
    java.net.Inet4Address[] getInet4Addresses() -> g
    java.net.Inet6Address[] getInet6Addresses() -> h
    int getPort() -> i
    int getPriority() -> j
    int getWeight() -> k
    byte[] getTextBytes() -> l
    java.lang.String getApplication() -> m
    java.lang.String getDomain() -> n
    java.lang.String getProtocol() -> o
    java.lang.String getSubtype() -> p
    java.util.Map getQualifiedNameMap() -> q
    void writeUTF(java.io.OutputStream,java.lang.String) -> a
    java.lang.String readUTF(byte[],int,int) -> a
    java.util.Map getProperties() -> F
    void updateRecord(javax.jmdns.impl.DNSCache,long,javax.jmdns.impl.DNSEntry) -> a
    boolean hasData() -> r
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    boolean revertState() -> s
    boolean cancelState() -> t
    boolean recoverState() -> u
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    boolean isProbing() -> v
    boolean isAnnouncing() -> w
    boolean isAnnounced() -> x
    boolean waitForAnnounced$1349f3() -> y
    boolean waitForCanceled$1349f3() -> z
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    javax.jmdns.impl.ServiceInfoImpl clone() -> G
    java.lang.String toString() -> toString
    java.util.Collection answers$58f623d3(int,javax.jmdns.impl.HostInfo) -> a
    void _setText(byte[]) -> a
    byte[] textFromProperties(java.util.Map) -> b
    void setDns(javax.jmdns.impl.JmDNSImpl) -> a
    javax.jmdns.impl.JmDNSImpl getDns() -> A
    boolean isPersistent() -> B
    void setNeedTextAnnouncing$1385ff() -> C
    boolean needTextAnnouncing() -> D
    javax.jmdns.ServiceInfo clone() -> E
    java.lang.Object clone() -> clone
javax.jmdns.impl.ServiceInfoImpl$1 -> a.a.a.s:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> a
javax.jmdns.impl.ServiceInfoImpl$ServiceInfoState -> a.a.a.ai:
    javax.jmdns.impl.ServiceInfoImpl _info -> c
    void setTask(javax.jmdns.impl.tasks.DNSTask) -> c
    void setDns(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.SocketListener -> a.a.a.m:
    java.util.logging.Logger logger -> a
    javax.jmdns.impl.JmDNSImpl _jmDNSImpl -> b
    void run() -> run
javax.jmdns.impl.constants.DNSConstants -> a.a.a.b.a:
    int MDNS_PORT -> a
javax.jmdns.impl.constants.DNSLabel -> a.a.a.b.i:
    javax.jmdns.impl.constants.DNSLabel Unknown -> a
    javax.jmdns.impl.constants.DNSLabel Standard -> b
    javax.jmdns.impl.constants.DNSLabel Compressed -> c
    javax.jmdns.impl.constants.DNSLabel Extended -> d
    java.lang.String _externalName -> e
    int _index -> f
    javax.jmdns.impl.constants.DNSLabel[] $VALUES -> g
    javax.jmdns.impl.constants.DNSLabel[] values() -> values
    javax.jmdns.impl.constants.DNSLabel valueOf(java.lang.String) -> valueOf
    javax.jmdns.impl.constants.DNSLabel labelForByte(int) -> a
    int labelValue(int) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSOptionCode -> a.a.a.b.d:
    javax.jmdns.impl.constants.DNSOptionCode Unknown -> a
    javax.jmdns.impl.constants.DNSOptionCode LLQ -> b
    javax.jmdns.impl.constants.DNSOptionCode UL -> c
    javax.jmdns.impl.constants.DNSOptionCode NSID -> d
    javax.jmdns.impl.constants.DNSOptionCode Owner -> e
    java.lang.String _externalName -> f
    int _index -> g
    javax.jmdns.impl.constants.DNSOptionCode[] $VALUES -> h
    javax.jmdns.impl.constants.DNSOptionCode[] values() -> values
    javax.jmdns.impl.constants.DNSOptionCode valueOf(java.lang.String) -> valueOf
    javax.jmdns.impl.constants.DNSOptionCode resultCodeForFlags(int) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSRecordClass -> a.a.a.b.h:
    javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN -> a
    javax.jmdns.impl.constants.DNSRecordClass CLASS_IN -> b
    javax.jmdns.impl.constants.DNSRecordClass CLASS_CS -> d
    javax.jmdns.impl.constants.DNSRecordClass CLASS_CH -> e
    javax.jmdns.impl.constants.DNSRecordClass CLASS_HS -> f
    javax.jmdns.impl.constants.DNSRecordClass CLASS_NONE -> g
    javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY -> c
    java.util.logging.Logger logger -> h
    java.lang.String _externalName -> i
    int _index -> j
    javax.jmdns.impl.constants.DNSRecordClass[] $VALUES -> k
    javax.jmdns.impl.constants.DNSRecordClass[] values() -> values
    javax.jmdns.impl.constants.DNSRecordClass valueOf(java.lang.String) -> valueOf
    int indexValue() -> a
    boolean isUnique(int) -> a
    javax.jmdns.impl.constants.DNSRecordClass classForIndex(int) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSRecordType -> a.a.a.b.g:
    javax.jmdns.impl.constants.DNSRecordType TYPE_IGNORE -> a
    javax.jmdns.impl.constants.DNSRecordType TYPE_A -> b
    javax.jmdns.impl.constants.DNSRecordType TYPE_NS -> l
    javax.jmdns.impl.constants.DNSRecordType TYPE_MD -> m
    javax.jmdns.impl.constants.DNSRecordType TYPE_MF -> n
    javax.jmdns.impl.constants.DNSRecordType TYPE_CNAME -> c
    javax.jmdns.impl.constants.DNSRecordType TYPE_SOA -> o
    javax.jmdns.impl.constants.DNSRecordType TYPE_MB -> p
    javax.jmdns.impl.constants.DNSRecordType TYPE_MG -> q
    javax.jmdns.impl.constants.DNSRecordType TYPE_MR -> r
    javax.jmdns.impl.constants.DNSRecordType TYPE_NULL -> s
    javax.jmdns.impl.constants.DNSRecordType TYPE_WKS -> t
    javax.jmdns.impl.constants.DNSRecordType TYPE_PTR -> d
    javax.jmdns.impl.constants.DNSRecordType TYPE_HINFO -> e
    javax.jmdns.impl.constants.DNSRecordType TYPE_MINFO -> u
    javax.jmdns.impl.constants.DNSRecordType TYPE_MX -> v
    javax.jmdns.impl.constants.DNSRecordType TYPE_TXT -> f
    javax.jmdns.impl.constants.DNSRecordType TYPE_RP -> w
    javax.jmdns.impl.constants.DNSRecordType TYPE_AFSDB -> x
    javax.jmdns.impl.constants.DNSRecordType TYPE_X25 -> y
    javax.jmdns.impl.constants.DNSRecordType TYPE_ISDN -> z
    javax.jmdns.impl.constants.DNSRecordType TYPE_RT -> A
    javax.jmdns.impl.constants.DNSRecordType TYPE_NSAP -> B
    javax.jmdns.impl.constants.DNSRecordType TYPE_NSAP_PTR -> C
    javax.jmdns.impl.constants.DNSRecordType TYPE_SIG -> D
    javax.jmdns.impl.constants.DNSRecordType TYPE_KEY -> E
    javax.jmdns.impl.constants.DNSRecordType TYPE_PX -> F
    javax.jmdns.impl.constants.DNSRecordType TYPE_GPOS -> G
    javax.jmdns.impl.constants.DNSRecordType TYPE_AAAA -> g
    javax.jmdns.impl.constants.DNSRecordType TYPE_LOC -> H
    javax.jmdns.impl.constants.DNSRecordType TYPE_NXT -> I
    javax.jmdns.impl.constants.DNSRecordType TYPE_EID -> J
    javax.jmdns.impl.constants.DNSRecordType TYPE_NIMLOC -> K
    javax.jmdns.impl.constants.DNSRecordType TYPE_SRV -> h
    javax.jmdns.impl.constants.DNSRecordType TYPE_ATMA -> L
    javax.jmdns.impl.constants.DNSRecordType TYPE_NAPTR -> M
    javax.jmdns.impl.constants.DNSRecordType TYPE_KX -> N
    javax.jmdns.impl.constants.DNSRecordType TYPE_CERT -> O
    javax.jmdns.impl.constants.DNSRecordType TYPE_A6 -> i
    javax.jmdns.impl.constants.DNSRecordType TYPE_DNAME -> P
    javax.jmdns.impl.constants.DNSRecordType TYPE_SINK -> Q
    javax.jmdns.impl.constants.DNSRecordType TYPE_OPT -> j
    javax.jmdns.impl.constants.DNSRecordType TYPE_APL -> R
    javax.jmdns.impl.constants.DNSRecordType TYPE_DS -> S
    javax.jmdns.impl.constants.DNSRecordType TYPE_SSHFP -> T
    javax.jmdns.impl.constants.DNSRecordType TYPE_RRSIG -> U
    javax.jmdns.impl.constants.DNSRecordType TYPE_NSEC -> V
    javax.jmdns.impl.constants.DNSRecordType TYPE_DNSKEY -> W
    javax.jmdns.impl.constants.DNSRecordType TYPE_UINFO -> X
    javax.jmdns.impl.constants.DNSRecordType TYPE_UID -> Y
    javax.jmdns.impl.constants.DNSRecordType TYPE_GID -> Z
    javax.jmdns.impl.constants.DNSRecordType TYPE_UNSPEC -> aa
    javax.jmdns.impl.constants.DNSRecordType TYPE_TKEY -> ab
    javax.jmdns.impl.constants.DNSRecordType TYPE_TSIG -> ac
    javax.jmdns.impl.constants.DNSRecordType TYPE_IXFR -> ad
    javax.jmdns.impl.constants.DNSRecordType TYPE_AXFR -> ae
    javax.jmdns.impl.constants.DNSRecordType TYPE_MAILA -> af
    javax.jmdns.impl.constants.DNSRecordType TYPE_MAILB -> ag
    javax.jmdns.impl.constants.DNSRecordType TYPE_ANY -> k
    java.util.logging.Logger logger -> ah
    java.lang.String _externalName -> ai
    int _index -> aj
    javax.jmdns.impl.constants.DNSRecordType[] $VALUES -> ak
    javax.jmdns.impl.constants.DNSRecordType[] values() -> values
    javax.jmdns.impl.constants.DNSRecordType valueOf(java.lang.String) -> valueOf
    int indexValue() -> a
    javax.jmdns.impl.constants.DNSRecordType typeForIndex(int) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSResultCode -> a.a.a.b.f:
    javax.jmdns.impl.constants.DNSResultCode Unknown -> a
    javax.jmdns.impl.constants.DNSResultCode NoError -> b
    javax.jmdns.impl.constants.DNSResultCode FormErr -> c
    javax.jmdns.impl.constants.DNSResultCode ServFail -> d
    javax.jmdns.impl.constants.DNSResultCode NXDomain -> e
    javax.jmdns.impl.constants.DNSResultCode NotImp -> f
    javax.jmdns.impl.constants.DNSResultCode Refused -> g
    javax.jmdns.impl.constants.DNSResultCode YXDomain -> h
    javax.jmdns.impl.constants.DNSResultCode YXRRSet -> i
    javax.jmdns.impl.constants.DNSResultCode NXRRSet -> j
    javax.jmdns.impl.constants.DNSResultCode NotAuth -> k
    javax.jmdns.impl.constants.DNSResultCode NotZone -> l
    java.lang.String _externalName -> m
    int _index -> n
    javax.jmdns.impl.constants.DNSResultCode[] $VALUES -> o
    javax.jmdns.impl.constants.DNSResultCode[] values() -> values
    javax.jmdns.impl.constants.DNSResultCode valueOf(java.lang.String) -> valueOf
    javax.jmdns.impl.constants.DNSResultCode resultCodeForFlags(int,int) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSState -> a.a.a.b.e:
    javax.jmdns.impl.constants.DNSState PROBING_1 -> a
    javax.jmdns.impl.constants.DNSState PROBING_2 -> b
    javax.jmdns.impl.constants.DNSState PROBING_3 -> c
    javax.jmdns.impl.constants.DNSState ANNOUNCING_1 -> d
    javax.jmdns.impl.constants.DNSState ANNOUNCING_2 -> e
    javax.jmdns.impl.constants.DNSState ANNOUNCED -> f
    javax.jmdns.impl.constants.DNSState CANCELING_1 -> g
    javax.jmdns.impl.constants.DNSState CANCELING_2 -> h
    javax.jmdns.impl.constants.DNSState CANCELING_3 -> i
    javax.jmdns.impl.constants.DNSState CANCELED -> j
    javax.jmdns.impl.constants.DNSState CLOSING -> k
    javax.jmdns.impl.constants.DNSState CLOSED -> l
    java.lang.String _name -> m
    javax.jmdns.impl.constants.DNSState$StateClass _state -> n
    javax.jmdns.impl.constants.DNSState[] $VALUES -> o
    javax.jmdns.impl.constants.DNSState[] values() -> values
    javax.jmdns.impl.constants.DNSState valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    javax.jmdns.impl.constants.DNSState advance() -> a
    javax.jmdns.impl.constants.DNSState revert() -> b
    boolean isProbing() -> c
    boolean isAnnouncing() -> d
    boolean isAnnounced() -> e
    boolean isCanceling() -> f
    boolean isCanceled() -> g
    boolean isClosing() -> h
    boolean isClosed() -> i
javax.jmdns.impl.constants.DNSState$1 -> a.a.a.b.c:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSState -> a
javax.jmdns.impl.constants.DNSState$StateClass -> a.a.a.b.b:
    javax.jmdns.impl.constants.DNSState$StateClass probing -> a
    javax.jmdns.impl.constants.DNSState$StateClass announcing -> b
    javax.jmdns.impl.constants.DNSState$StateClass announced -> c
    javax.jmdns.impl.constants.DNSState$StateClass canceling -> d
    javax.jmdns.impl.constants.DNSState$StateClass canceled -> e
    javax.jmdns.impl.constants.DNSState$StateClass closing -> f
    javax.jmdns.impl.constants.DNSState$StateClass closed -> g
    javax.jmdns.impl.constants.DNSState$StateClass[] $VALUES -> h
    javax.jmdns.impl.constants.DNSState$StateClass[] values() -> values
    javax.jmdns.impl.constants.DNSState$StateClass valueOf(java.lang.String) -> valueOf
javax.jmdns.impl.tasks.DNSTask -> a.a.a.a.b:
    javax.jmdns.impl.JmDNSImpl _jmDNSImpl -> a
    javax.jmdns.impl.JmDNSImpl getDns() -> k
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
    javax.jmdns.impl.DNSOutgoing addQuestion(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSQuestion) -> a
    javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord) -> a
    javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord,long) -> a
    javax.jmdns.impl.DNSOutgoing addAuthoritativeAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord) -> a
javax.jmdns.impl.tasks.RecordReaper -> a.a.a.a.a:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> a
    void start(java.util.Timer) -> a
    void run() -> run
javax.jmdns.impl.tasks.Responder -> a.a.a.a.c:
    java.util.logging.Logger logger -> a
    javax.jmdns.impl.DNSIncoming _in -> b
    boolean _unicast -> c
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    void run() -> run
javax.jmdns.impl.tasks.resolver.DNSResolverTask -> a.a.a.a.a.c:
    java.util.logging.Logger logger -> a
    int _count -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    void run() -> run
    javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) -> b
    javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) -> a
    java.lang.String description() -> b
javax.jmdns.impl.tasks.resolver.ServiceInfoResolver -> a.a.a.a.a.a:
    javax.jmdns.impl.ServiceInfoImpl _info -> a
    java.lang.String getName() -> a
    boolean cancel() -> cancel
    javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) -> b
    java.lang.String description() -> b
javax.jmdns.impl.tasks.resolver.ServiceResolver -> a.a.a.a.a.b:
    java.lang.String _type -> a
    java.lang.String getName() -> a
    javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) -> b
    java.lang.String description() -> b
javax.jmdns.impl.tasks.state.Announcer -> a.a.a.a.b.c:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> b
    boolean checkRunCondition() -> c
    javax.jmdns.impl.DNSOutgoing createOugoing() -> d
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask$786b7c60() -> e
    void advanceTask() -> f
javax.jmdns.impl.tasks.state.Canceler -> a.a.a.a.b.a:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> b
    boolean checkRunCondition() -> c
    javax.jmdns.impl.DNSOutgoing createOugoing() -> d
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask$786b7c60() -> e
    void advanceTask() -> f
javax.jmdns.impl.tasks.state.DNSStateTask -> a.a.a.a.b.e:
    java.util.logging.Logger logger1 -> a
    int _ttl -> b
    int _defaultTTL -> c
    javax.jmdns.impl.constants.DNSState _taskState -> d
    java.lang.String getTaskDescription() -> b
    int defaultTTL() -> g
    int getTTL() -> h
    void associate(javax.jmdns.impl.constants.DNSState) -> a
    void removeAssociation() -> i
    void run() -> run
    boolean checkRunCondition() -> c
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing createOugoing() -> d
    void advanceObjectsState(java.util.List) -> a
    void recoverTask$786b7c60() -> e
    void advanceTask() -> f
    javax.jmdns.impl.constants.DNSState getTaskState() -> j
    void setTaskState(javax.jmdns.impl.constants.DNSState) -> b
javax.jmdns.impl.tasks.state.Prober -> a.a.a.a.b.b:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> b
    boolean checkRunCondition() -> c
    javax.jmdns.impl.DNSOutgoing createOugoing() -> d
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask$786b7c60() -> e
    void advanceTask() -> f
javax.jmdns.impl.tasks.state.Renewer -> a.a.a.a.b.d:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> b
    boolean checkRunCondition() -> c
    javax.jmdns.impl.DNSOutgoing createOugoing() -> d
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask$786b7c60() -> e
    void advanceTask() -> f
